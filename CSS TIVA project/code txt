//include all necessary libraries
#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/timer.h"
#include "driverlib/pin_map.h"
#include "driverlib/pwm.h"
#include "driverlib/adc.h"
//////
#define PULSE 100000000 //Pulse
#define H 100000000  //100%
#define L 1000000 //1%
#define OFF 1   //0%

//initialize the global variables
uint32_t button = 0;                //global variable used in main and GPIO ISR
uint32_t timer = 0;                 //global variable used in main and timer ISR
uint32_t measurement = 0;           //measurement variable
uint32_t timer_trigger = 0;         //trigger variable
uint32_t timer_echo_value = 0;      //echo variable
uint32_t cronometro_get = 0;        //timer value recorded from TimerValueGet
uint32_t CENTIMETRES = 0;           //DISTANCE value in centimeters
uint8_t on_off = 0;                 //LED State change variable
uint32_t pulse_width = 0;           //PWM pulse width
uint32_t ADC_lecture[1];           //value that the ADC reads
uint32_t Intensity = 0;             //light intensity
uint32_t lightlevel[1] = {0};

//GPIO button interrupt
void buttonHandler(){
    GPIOIntClear(GPIO_PORTF_BASE, GPIO_PIN_4);  //Clear flag
        measurement = 1;
        timer = 1;
            if(button >= 2){
                button = 0;
            }
            else{
                button++;
            }
}

//1second timer
void timerHandler(){
    TimerIntClear(TIMER2_BASE, TIMER_TIMA_TIMEOUT);
    measurement=1;
        if(timer >= 1){
            measurement=1;
            timer = 0;
        }
        else{
            timer++;
        }
}

//20 micro-second timer
void timerTrigger(){
    TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
    GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_6, 0x00);
}

//echo interrupt
void interrupt_echo(){                                  //this function is activated once there is a rising or falling edge
    GPIOIntClear(GPIO_PORTA_BASE, GPIO_PIN_7);          // echo restarts
    if(GPIOPinRead(GPIO_PORTA_BASE, GPIO_PIN_7)!=0){    //if pin 7 receives a voltage different from 0
    TimerLoadSet(TIMER3_BASE, TIMER_A, 63998);          //Prescaler not necessary as defined on the configuration
    TimerEnable(TIMER3_BASE, TIMER_A);                  //Enable the timer
    timer_echo_value=1;
    }
    else if(GPIOPinRead(GPIO_PORTA_BASE, GPIO_PIN_7)==0) //if pin 7 does not read a voltage (=0); falling edge, gets the time it falls
    {
    cronometro_get = TimerValueGet(TIMER3_BASE, TIMER_A);
    TimerDisable(TIMER3_BASE, TIMER_A);
    timer_echo_value=0;

    }
}

int main(void){
    //Button configuration
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
    GPIOPinTypeGPIOInput(GPIO_PORTF_BASE, GPIO_PIN_4);
    GPIOPadConfigSet(GPIO_PORTF_BASE, GPIO_PIN_4, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);
    GPIOIntDisable(GPIO_PORTF_BASE, GPIO_PIN_4);
    GPIOIntClear(GPIO_PORTF_BASE, GPIO_PIN_4);
    GPIOIntTypeSet(GPIO_PORTF_BASE, GPIO_PIN_4, GPIO_FALLING_EDGE);
    GPIOIntRegister(GPIO_PORTF_BASE, buttonHandler);
    GPIOIntEnable(GPIO_PORTF_BASE, GPIO_PIN_4);
    //LED configuration
    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1);
    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_2);
    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_3);
    //Timer 1s configuration
    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER2);
    TimerClockSourceSet(TIMER2_BASE, TIMER_CLOCK_SYSTEM);
    TimerConfigure(TIMER2_BASE, TIMER_CFG_PERIODIC|TIMER_CFG_SPLIT_PAIR);
    TimerPrescaleSet(TIMER2_BASE, TIMER_A, 249);                    //calculated for 1s
    TimerLoadSet(TIMER2_BASE, TIMER_A, 63998);                      //it cannot be>65535 = 16 bits
    TimerIntEnable(TIMER2_BASE, TIMER_TIMA_TIMEOUT);
    TimerIntRegister(TIMER2_BASE, TIMER_A, timerHandler);
    TimerEnable(TIMER2_BASE, TIMER_A);

   //Timer 20us configuration
    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);
    TimerClockSourceSet(TIMER0_BASE, TIMER_CLOCK_SYSTEM);
    TimerConfigure(TIMER0_BASE, TIMER_CFG_ONE_SHOT);
    TimerPrescaleSet(TIMER0_BASE, TIMER_A, 0);                      //calculated for 20 microseconds
    TimerLoadSet(TIMER0_BASE, TIMER_A, 319);
    TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
    TimerIntRegister(TIMER0_BASE, TIMER_A, timerTrigger);

    //Timer echo configuration
    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER3);
    TimerClockSourceSet(TIMER3_BASE, TIMER_CLOCK_SYSTEM);
    TimerConfigure(TIMER3_BASE, TIMER_CFG_PERIODIC|TIMER_CFG_SPLIT_PAIR);
    TimerPrescaleSet(TIMER3_BASE, TIMER_A, 15);                    //15 us so that the measurement is in microseconds (15+1 = 16Mhz clock)
    TimerLoadSet(TIMER3_BASE, TIMER_A, 63998);

     //GPIO echo config
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    GPIOPinTypeGPIOOutput(GPIO_PORTA_BASE, GPIO_PIN_6);
    GPIOPinTypeGPIOInput(GPIO_PORTA_BASE, GPIO_PIN_7);
    GPIOPadConfigSet(GPIO_PORTA_BASE, GPIO_PIN_7, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);
    GPIOIntDisable(GPIO_PORTA_BASE, GPIO_PIN_7);
    GPIOIntClear(GPIO_PORTA_BASE, GPIO_PIN_7);
    GPIOIntTypeSet(GPIO_PORTA_BASE, GPIO_PIN_7, GPIO_BOTH_EDGES);   //if rising edge or decreasing edge, activate interrupt_echo
    GPIOIntRegister(GPIO_PORTA_BASE, interrupt_echo);               //timer = ISR GPIO echo edges
    GPIOIntEnable(GPIO_PORTA_BASE, GPIO_PIN_7);

    //PWM LED configuration
    SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
    GPIOPinTypePWM(GPIO_PORTE_BASE, GPIO_PIN_5);//PE5
    GPIOPinConfigure(GPIO_PE5_M0PWM5);
    SysCtlPWMClockSet(SYSCTL_PWMDIV_1);
    PWMGenConfigure(PWM0_BASE, PWM_GEN_2, PWM_GEN_MODE_DOWN);
    PWMOutputState(PWM0_BASE, PWM_OUT_5_BIT, true);

    //LDR ADC configuration
    SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);
    GPIOPinTypeADC(GPIO_PORTD_BASE, GPIO_PIN_0);
    ADCSequenceConfigure(ADC0_BASE, 3, ADC_TRIGGER_PROCESSOR, 0);
    ADCSequenceStepConfigure(ADC0_BASE, 3, 0, ADC_CTL_CH0 | ADC_CTL_END);
    ADCSequenceEnable(ADC0_BASE, 3);

    while(1){
        if (button == 0){
            PWMGenDisable(PWM0_BASE, PWM_GEN_2);
            GPIOPinWrite(GPIO_PORTF_BASE, (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3) , GPIO_PIN_1);             //red LED on
        }
        if (button == 1){
            if (measurement==1){
                measurement=0;
                    if(on_off == 0){
                        GPIOPinWrite(GPIO_PORTF_BASE, (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3) , GPIO_PIN_2); //blue LED on
                    }
                    else{
                        GPIOPinWrite(GPIO_PORTF_BASE, (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3) , 0x00);       //blue LED off
                    }
                    if (on_off == 0){
                            on_off =1;
                        }
                        else{
                            on_off = 0;
                        }
                    GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_6, GPIO_PIN_6);
                    TimerEnable(TIMER0_BASE, TIMER_A);
            }


                    if (timer_echo_value==0){
                    CENTIMETRES = (63998 - cronometro_get)/58;
                }
                    if(CENTIMETRES > 30){
                        pulse_width = OFF;
                    }
                    else if(CENTIMETRES > 12){
                        pulse_width = L;
                    }
                    else{
                        pulse_width = H;
                    }
                    PWMGenDisable(PWM0_BASE, PWM_GEN_2);
                    PWMGenPeriodSet(PWM0_BASE, PWM_GEN_2, PULSE);
                    PWMPulseWidthSet(PWM0_BASE, PWM_OUT_5, pulse_width);
                    PWMGenEnable(PWM0_BASE, PWM_GEN_2);
        }
        if (button == 2){
            if (measurement==1){
                measurement=0;
                    if(on_off == 0){
                        GPIOPinWrite(GPIO_PORTF_BASE, (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3) , GPIO_PIN_3); //green LED on
                    }
                    else{
                        GPIOPinWrite(GPIO_PORTF_BASE, (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3) , 0x00);       //green LED off
                    }
                    if (on_off == 0){
                            on_off =1;
                        }
                        else{
                            on_off = 0;
                        }
                    ADCSequenceEnable(ADC0_BASE, 3);
                    ADCProcessorTrigger(ADC0_BASE, 3);
                    while(ADCBusy(ADC0_BASE));
                    ADCSequenceDataGet(ADC0_BASE, 3, ADC_lecture);
                    ADCSequenceDisable(ADC0_BASE, 3);
                    if(ADC_lecture[0] <= 2500){
                        Intensity = 3;
                    }
                    else if(ADC_lecture[0] <= 3500){
                        Intensity = 2;
                    }
                    else{
                        Intensity = 1;
                    }

                    if(Intensity == 1){
                        pulse_width = OFF;
                    }
                    else if(Intensity == 2){
                        pulse_width = L;
                    }
                    else if(Intensity == 3){
                        pulse_width = H;
                    }
                    else{
                        pulse_width = 0;
                    }
                    PWMGenDisable(PWM0_BASE, PWM_GEN_2);
                    PWMGenPeriodSet(PWM0_BASE, PWM_GEN_2, PULSE);
                    PWMPulseWidthSet(PWM0_BASE, PWM_OUT_5, pulse_width);
                    PWMGenEnable(PWM0_BASE, PWM_GEN_2);

            }

        }
    }
}